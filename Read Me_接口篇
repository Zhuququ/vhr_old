①使用注解 @RestController 定义为REST接口
②使用注解 @RequestMapping 定义统一的接口前缀
③使用注解 @GetMapping,@PostMapping,@PutMapping,@DeleteMapping 定义各种请求处理

1. Controller
@RestController
@RequestMapping("/system/basic/pos")
public class PositionController {
	
	@Autowired
	PositionService positionService;
	
	1. GET请求，用于进行检索
	@GetMapping("/")
	public List<Position> getAllPositions() {
		return positionService.getAllPositions();
	}
	
	2. Post请求，用于进行追加
	@PostMapping("/")
	// 因为前端通过json的形式将Position对象传到后端，所以参数加上注解 @RequestBody
	public RespBean addPosition(@RequestBody Position position) {
		// 成功追加
		if (positionService.addPosition(position) == 1) {
			return RespBean.ok("添加成功！");
		}
		return RespBean.error("添加失败！");
	}
	
	3. Put请求，用于进行更新
	@PutMapping("/")
	// 因为前端通过json的形式将Position对象传到后端，所以参数加上@RequestBody
	public RespBean updatePosition(@RequestBody Position position) {
		// 成功更新
		if (positionService.updatePosition(position) == 1) {
			return RespBean.ok("更新成功！");
		}
		return RespBean.error("更新失败！");
	}
	
	4.1 Delete请求，用于进行删除
	@DeleteMapping("/{id}")
	// 因为需要获取URL中的id参数，所以参数加上注解 @PathVariable
	public RespBean deletePositionById(@PathVariable Integer id) {
		if (positionService.deletePositionById(id) == 1) {
			return RespBean.ok("删除成功！");
		}
		return RespBean.ok("删除成功！");
	}
	
	4.2 Delete请求，用于进行批量删除
	@DeleteMapping("/")
	// 前端通过URL拼接（?ids=xxx&ids=yyy&ids=zzz）的形式，将多个id传到后端，后端以数组的形式接收
	public RespBean deletePositionByIds(Integer[] ids) {
		if (positionService.deletePositionByIds(ids) == ids.length) {
			return RespBean.ok("删除成功！");
		}
		return RespBean.ok("删除成功！");
	}
}

2. Service
@Service
public class PositionService {
	
	@Autowired
	PositionMapper positionMapper;
	
	public List<Position> getAllPositions() {
        return positionMapper.getAllPositions();
    }

    public Integer addPosition(Position position) {
		// 设置追加时间
        position.setCreateDate(new Date());
		// 设置默认值 true
        position.setEnabled(true);
        return positionMapper.insertSelective(position);
    }

	// updatePosition和deletePositionById可以使用自动生成的sql，注意是使用带Selective的sql，这样如果参数为null的话，不会进行更新
    public Integer updatePosition(Position position) {
        return positionMapper.updateByPrimaryKeySelective(position);
    }

    public Integer deletePositionById(Integer id) {
        return positionMapper.deleteByPrimaryKey(id);
    }

    public Integer deletePositionsByIds(Integer[] ids) {
        return positionMapper.deletePositionsByIds(ids);
    }
}

3. Mapper.java
public interface PositionMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Position record);

    int insertSelective(Position record);

    Position selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Position record);

    int updateByPrimaryKey(Position record);

    List<Position> getAllPositions();

	// 使用注解 @Param，一遍在xml中使用ids
    Integer deletePositionsByIds(@Param("ids") Integer[] ids);
}

4. Mapper.xml
<select id="getAllPositions" resultMap="BaseResultMap">
	select * from position
</select>
<delete id="deletePositionsByIds">
	delete from position where id in
	<!--使用foreach-->
	<foreach collection="ids" item="id" separator="," open="(" close=")">
		#{id}
	</foreach>
</delete>

================================================================================================================
前端篇

前后端异常信息的数据结构
正常：
{
	status: 200,//请求的状态码
	data: {
		status: 200/500,// 业务的状态码
		msg: 'xxx'// 业务的信息
	}
}
异常：
{
	response: {
		status: 504//请求的状态码
	},
	data: {
		status: 500,// 业务的状态码
		msg: 'xxx'// 业务的信息
	}
}


1. 使用axios定义统一的REST请求方法
1.1 使用axios的拦截器，统一定义从后端返回的正常/异常信息
axios.interceptors.response.use(success => {
	if (success.status && success.statuss == 200 && success.data.status == 500) {
		// 请求成功，但是业务处理失败
		Message.error({message: success.data.msg});
		return;
	}
	if (success.data.msg) {
		// 请求成功，并且定义了msg
		Message.success({message: success.data.msg});
	}
}, error => {
	if (error.response.status == 504 || error.response.status == 404) {
		// 请求失败
		Message.error({message: "服务器被吃了( ╯□╰ )！"});
	} else if (error.response.status == 403) {
		Message.error({message: "权限不足，请联系管理员！"});
	} else if (error.response.status == 401) {
		Message.error({message: "尚未登录，请登录！"});
	} else {
		// 后端自定义一些状态码，且有msg
		if (error.response.data.msg) {
            Message.error({message: error.response.data.msg});
        } else {
            Message.error({message: "未知错误！"});
        }
	}
	return;
});

2. 定义各种请求处理
2.1 定义统一的接口前缀
let base = '';
2.2.1 key/value形式的请求（Form提交）
export const postKeyValueRequest = (url, params) => {
	return axios({
		method: 'post',
		url: `${base}${url}`, // ES6的占位符替换方式
		data: params,
		// 对参数进行转换
		transformRequset: [function (data) {
			let ret = '';
			for (let i in data) {
				ret += encodeURIComponent(i) + "=" + encodeURIComponent(data[i]) + "&";
			}
			return ret;
		}],
		header: {
			'Content-Type': 'applicaiton/x-www-form-urlencoded'
		}
	});
}
2.2.2 post请求(json形式请求)
export const postRequest = (url, params) => {
	return axios({
		method: 'post',
		url: `${base}${url}`,
		data: params
	});
}
2.2.3 put请求(json形式请求)
export const putRequest = (url, params) => {
	return axios({
		method: 'put',
		url: `${base}${url}`,
		data: params
	});
}
2.2.4 get请求
export const getRequest = (url) => {
	return axios({
		method: 'get',
		url: `${base}${url}`
	});
}
2.2.3 delete请求(json形式请求)
export const deleteRequest = (url, params) => {
	return axios({
		method: 'delete',
		url: `${base}${url}`,
		data: params
	});
}

3. 将定义的接口访问方法绑定到Vue上
3.1 使用插件的形式，将常用的方法绑定到Vue中
import {deleteRequest, getRequest, postKeyValueRequest, postRequest, putRequest} from "./utils/api";

Vue.prototype.postKeyValueRequest = postKeyValueRequest;
Vue.prototype.postRequest = postRequest;
Vue.prototype.getRequest = getRequest;
Vue.prototype.deleteRequest = deleteRequest;
Vue.prototype.putRequest = putRequest;

4. 解决开发环境下的跨域问题
4.1 新建vue.config.js文件
4.2 
	let proxyObj = {};
	
	// 定义拦截的请求地址
	// 拦截所有请求
	proxyObj['/'] = {
		ws: false,// 把websocket关闭，之后会单独配置
		target: 'http://localhost:8081',// 将拦截的请求转发到target
		changeOrigin: true,
		pathRewrite: {
			'^/': ''// 拦截的地址不进行修改
		}
		
	}
	
	module.exports = {
		devServer: {
			host: 'localhost',// 本服务器的主机号
			port: 8080,// 本服务器的端口
			proxy: proxyObj// 代理信息
		}
	}
	
5. 前端使用接口访问方法访问后端
5.1 Get
	this.getRequest('/system/basic/pos/').then(resp => {
		if (resp) {
			...
		}
	})
5.2 Post
	this.postRequest('/system/basic/pos/', this.pos).then(resp => {
		if (resp) {
			...
		}
	});
5.3 Put
	this.putRequest('/system/basic/pos/', this.editPos).then(resp => {
		if (resp) {
			...
		}
	});
5.4 Delete
	this.deleteRequest('/system/basic/pos/' + data.id).then(resp => {
		if (resp) {
			...
		}
	});
5.5 批量Delete
	let ids = '?';
	this.multipleSelection.forEach((value, index) => {
		ids += 'ids=' + value.id + '&';
	});
	this.deleteRequest('/system/basic/pos/' + ids).then(resp=> {
		if (resp) {
			...
		}
	})